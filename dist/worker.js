let lockTimeoutId=null;const DEFAULT_LOCK_MINUTES=5;function setupContextMenus(){chrome.contextMenus.create({id:"fillCredential",title:"Fill with Secure Shelf",contexts:["editable"]}),chrome.contextMenus.create({id:"generatePassword",title:"Generate Password",contexts:["editable"]})}function resetLockTimer(e){if(console.log(`🔧 resetLockTimer called with ${e} minutes`),console.log("🔧 Current lockTimeoutId:",lockTimeoutId),lockTimeoutId&&(console.log("🔧 Clearing existing timer"),clearTimeout(lockTimeoutId),lockTimeoutId=null),e<=0)return void console.log("🔧 Auto-lock disabled (minutes <= 0)");const o=Math.max(1,parseInt(e)||5),t=60*o*1e3;console.log(`🔧 Setting auto-lock timer for ${o} minutes (${t}ms)`),console.log(`🔧 Timer will trigger at: ${new Date(Date.now()+t).toLocaleTimeString()}`),console.log(`🔧 Current time: ${(new Date).toLocaleTimeString()}`),lockTimeoutId=setTimeout(()=>{console.log("🔧 ⏰ Auto-lock timer triggered at:",(new Date).toLocaleTimeString()),console.log("🔧 ⏰ Locking vault now!"),chrome.runtime.sendMessage({action:"autoLockVault"}),chrome.action.setIcon({path:{128:"icons/icon128-locked.svg"}}),lockTimeoutId=null},t),console.log("🔧 Timer set successfully. New lockTimeoutId:",lockTimeoutId),chrome.action.setIcon({path:{128:"icons/icon128.svg"}})}function clearLockTimer(){lockTimeoutId&&(clearTimeout(lockTimeoutId),lockTimeoutId=null),chrome.action.setIcon({path:{128:"icons/icon128-locked.svg"}})}chrome.contextMenus.onClicked.addListener((e,o)=>{"fillCredential"===e.menuItemId?chrome.tabs.sendMessage(o.id,{action:"requestFillCredential"}):"generatePassword"===e.menuItemId&&chrome.tabs.sendMessage(o.id,{action:"requestGeneratePassword"})}),chrome.runtime.onMessage.addListener((e,o,t)=>{switch(console.log("🔧 Worker received message:",e.action,e),console.log("🔧 Full message object:",JSON.stringify(e,null,2)),e.action){case"unlockVault":const o=e.lockAfterMinutes||5;console.log(`🔧 Worker: Setting auto-lock for ${o} minutes`),console.log("🔧 lockAfterMinutes from message:",e.lockAfterMinutes),resetLockTimer(o),t({success:!0});break;case"lockVault":clearLockTimer(),t({success:!0});break;case"resetAutoLockTimer":lockTimeoutId&&e.lockAfterMinutes&&(console.log("Worker: Resetting auto-lock timer due to activity"),resetLockTimer(e.lockAfterMinutes)),t({success:!0});break;case"getActiveTab":return chrome.tabs.query({active:!0,currentWindow:!0},e=>{e&&e[0]?t({url:e[0].url,tabId:e[0].id}):t({url:null,tabId:null})}),!0;case"testAutoLock":console.log("Testing auto-lock with 1 minute timeout"),resetLockTimer(1),t({success:!0,message:"Auto-lock test started for 1 minute"});break;default:t({success:!0,message:"Message received"})}return!0}),chrome.runtime.onInstalled.addListener(()=>{setupContextMenus()});