console.log("� Service Worker starting fresh...");let autoLockTimer=null,vaultState="locked";function startAutoLock(o){console.log("⏰ === STARTING AUTO-LOCK TIMER ==="),console.log(`⏰ Duration: ${o} minutes`),autoLockTimer&&(console.log("⏰ Clearing existing timer with ID:",autoLockTimer),clearTimeout(autoLockTimer),autoLockTimer=null);const e=60*o*1e3;console.log(`⏰ Timer duration: ${e}ms`);const t=new Date,l=new Date(t.getTime()+e);console.log(`⏰ Current time: ${t.toLocaleTimeString()}`),console.log(`⏰ Will trigger at: ${l.toLocaleTimeString()}`),console.log(`⏰ That's ${Math.round(e/1e3)} seconds from now`),autoLockTimer=setTimeout(()=>{console.log("� === AUTO-LOCK TRIGGERED ==="),console.log("� Trigger time:",(new Date).toLocaleTimeString()),console.log("🔒 Previous vault state:",vaultState),vaultState="locked",autoLockTimer=null,console.log("🔒 New vault state:",vaultState),console.log("🔒 Timer cleared");try{chrome.runtime.sendMessage({action:"autoLockVault"},o=>{console.log("🔒 Popup notification response:",o)})}catch(o){console.log("� No popup to notify (normal)")}console.log("� === AUTO-LOCK COMPLETE ===")},e),console.log(`⏰ Timer set successfully with ID: ${autoLockTimer}`),console.log("⏰ === AUTO-LOCK TIMER ACTIVE ===")}function clearAutoLock(){console.log("🚫 === CLEARING AUTO-LOCK ==="),autoLockTimer?(console.log("� Clearing timer with ID:",autoLockTimer),clearTimeout(autoLockTimer),autoLockTimer=null,console.log("🚫 Timer cleared successfully")):console.log("🚫 No timer to clear"),console.log("� === CLEAR COMPLETE ===")}chrome.runtime.onMessage.addListener((o,e,t)=>{switch(console.log("� Message received:",o.action),console.log("📨 Full message:",JSON.stringify(o,null,2)),console.log("📨 Current vault state:",vaultState),console.log("📨 Current timer status:",autoLockTimer?"ACTIVE":"INACTIVE"),o.action){case"unlockVault":console.log("� === VAULT UNLOCK PROCESS ===");const e=o.minutes||o.lockAfterMinutes||5;console.log(`🔓 Unlocking vault with ${e} minute auto-lock`),vaultState="unlocked",startAutoLock(e),console.log("🔓 Vault unlock complete"),t({success:!0,state:vaultState});break;case"startAutoLock":console.log("⏰ === MANUAL AUTO-LOCK START ==="),startAutoLock(o.minutes||5),t({success:!0});break;case"lockVault":console.log("� === VAULT LOCK PROCESS ==="),vaultState="locked",clearAutoLock(),console.log("🔒 Vault locked manually"),t({success:!0,state:vaultState});break;case"clearAutoLock":console.log("🚫 === CLEAR AUTO-LOCK ==="),clearAutoLock(),t({success:!0});break;case"getStatus":console.log("📊 === STATUS CHECK ===");const l={vaultState,timerActive:!!autoLockTimer,timerId:autoLockTimer};console.log("📊 Current status:",l),t(l);break;default:console.log("❓ Unknown action:",o.action),t({success:!0})}return!0}),console.log("✅ Clean Service Worker ready"),console.log("✅ Initial vault state:",vaultState),console.log("✅ Initial timer status:",autoLockTimer?"ACTIVE":"INACTIVE");